<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!-- Spotbugs filtering.

Spotbugs is a static code analysis tool run as part of the "check" phase of the build.
This file dictates which categories of bugs and individual false positives that we suppress.

For a detailed description of spotbugs bug categories, see https://spotbugs.readthedocs.io/en/latest/bugDescriptions.html
-->

<!--
Based copy of: https://github.com/apache/kafka/blob/3.6/gradle/spotbugs-exclude.xml
-->

<FindBugsFilter>

    <Match>
        <!-- Disable warnings about mutable objects and the use of public fields.
            EI_EXPOSE_REP: May expose internal representation by returning reference to mutable object
            EI_EXPOSE_REP2: May expose internal representation by incorporating reference to mutable object
            MS_PKGPROTECT: Field should be package protected
            MS_EXPOSE_REP: Public static method may expose internal representation by returning array
            EI_EXPOSE_STATIC_REP2: May expose internal static state by storing a mutable object into a static field -->
        <Bug pattern="EI_EXPOSE_REP,EI_EXPOSE_REP2,MS_PKGPROTECT,EI_EXPOSE_STATIC_REP2,MS_EXPOSE_REP"/>
    </Match>

    <Match>
        <!-- Disable warnings about System.exit, until we decide to stop using it.
            DM_EXIT: Method invokes System.exit -->
        <Bug pattern="DM_EXIT"/>
    </Match>

    <Match>
        <!-- Disable warnings about the lack of equals() when compareTo() is implemented.
            EQ_COMPARETO_USE_OBJECT_EQUALS: This class defines a compareTo method but no equals() method -->
        <Bug pattern="EQ_COMPARETO_USE_OBJECT_EQUALS"/>
    </Match>

    <Match>
        <!-- Spotbugs tends to work a little bit better with Java than with Scala.  We suppress
             some categories of bug reports when using Scala, since spotbugs generates huge
             numbers of false positives in some of these categories when examining Scala code.

            NP_LOAD_OF_KNOWN_NULL_VALUE: The variable referenced at this point is known to be null
            due to an earlier check against null.
            NP_NULL_PARAM_DEREF: Method call passes null for non-null parameter.
            NP_NULL_ON_SOME_PATH: Possible null pointer dereference
            SE_BAD_FIELD: Non-transient non-serializable instance field in serializable class.
            DM_STRING_CTOR: Method invokes inefficient new String(String) constructor.
            DM_NEW_FOR_GETCLASS: Method allocates an object, only to get the class object.
            ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD: Write to static field from instance method.
            DM_NUMBER_CTOR: Method invokes inefficient Number constructor; use static valueOf instead.
            RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE: Nullcheck of value previously dereferenced.
            RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE: Redundant nullcheck of value known to be non-null.
            RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE: Redundant nullcheck of value known to be null.
            RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT: Return value of method without side effect is ignored.
            NM_CLASS_NAMING_CONVENTION: Class names should start with an upper case letter.
            NM_METHOD_NAMING_CONVENTION: Method names should start with a lower case letter.
            EC_NULL_ARG: Call to equals(null)
            NP_ALWAYS_NULL: Null pointer dereference
            MS_CANNOT_BE_FINAL: Field isn't final and can't be protected from malicious code
            IC_INIT_CIRCULARITY: Initialization circularity
            SE_NO_SUITABLE_CONSTRUCTOR: Class is Serializable but its superclass doesn't define a void constructor -->
        <Source name="~.*\.scala" />
        <Or>
            <Bug pattern="NP_LOAD_OF_KNOWN_NULL_VALUE"/>
            <Bug pattern="NP_NULL_ON_SOME_PATH"/>
            <Bug pattern="NP_NULL_PARAM_DEREF"/>
            <Bug pattern="SE_BAD_FIELD"/>
            <Bug pattern="DM_STRING_CTOR"/>
            <Bug pattern="DM_NEW_FOR_GETCLASS"/>
            <Bug pattern="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD"/>
            <Bug pattern="DM_NUMBER_CTOR"/>
            <Bug pattern="RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE"/>
            <Bug pattern="RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"/>
            <Bug pattern="RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE"/>
            <Bug pattern="RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT"/>
            <Bug pattern="NM_CLASS_NAMING_CONVENTION"/>
            <Bug pattern="NM_METHOD_NAMING_CONVENTION"/>
            <Bug pattern="EC_NULL_ARG"/>
            <Bug pattern="NP_ALWAYS_NULL"/>
            <Bug pattern="MS_CANNOT_BE_FINAL"/>
            <Bug pattern="IC_INIT_CIRCULARITY"/>
            <Bug pattern="SE_NO_SUITABLE_CONSTRUCTOR"/>
            <Bug pattern="DMI_RANDOM_USED_ONLY_ONCE"/>
            <Bug pattern="SSD_DO_NOT_USE_INSTANCE_LOCK_ON_SHARED_STATIC_DATA"/>
        </Or>
    </Match>

</FindBugsFilter>