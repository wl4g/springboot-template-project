plugins {
    id 'java'
    id 'java-library'
    id "me.champeau.jmh" version "0.7.0"
}

description = "MyProject for Service"

dependencies {
    api 'net.logstash.logback:logstash-logback-encoder:7.2'
    api 'org.springframework.boot:spring-boot-starter'
    api 'org.springframework.boot:spring-boot-starter-web'
    api 'org.springframework.boot:spring-boot-actuator-autoconfigure'
    api 'org.springframework.boot:spring-boot-starter-actuator'
    api 'io.micrometer:micrometer-registry-jmx'
    api 'io.micrometer:micrometer-registry-prometheus'
    api 'net.logstash.logback:logstash-logback-encoder:7.2'
    api 'io.swagger.core.v3:swagger-annotations:2.2.2'
    api 'org.apache.commons:commons-lang3:3.13.0'
    api 'org.apache.commons:commons-collections4:4.4'
    api 'com.google.guava:guava:32.1.3-jre'
    api 'com.wl4g:infra-common:3.1.37'
    api 'com.googlecode.aviator:aviator:5.3.1'
    api 'net.thisptr:jackson-jq:0.0.13'
    api 'org.projectlombok:lombok:1.18.24'
    //api 'dev.langchain4j:langchain4j-core:0.24.0'
    //api 'dev.langchain4j:langchain4j-open-ai:0.24.0'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "junit:junit"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "junit:junit"
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"
    testImplementation "org.testcontainers:junit-jupiter:1.18.3"
    testImplementation 'org.testcontainers:kafka:1.18.3'
    testImplementation "org.testcontainers:testcontainers:1.18.3"
    testImplementation 'com.github.docker-java:docker-java-core:3.2.11'
}

jmh {
    warmupIterations = 5
    iterations = 5
    fork = 1
    failOnError = true
    jvmArgs = ['-Xms1G', '-Xmx1G', '-XX:+UseG1GC']
    profilers = ['gc', 'stack']
    resultsFile = project.file("${project.buildDir}/reports/jmh/results.json")
    resultFormat = 'JSON'
}

sourceSets {
    test {
        java {
            srcDirs 'src/it/java'
        }
        resources {
            srcDirs 'src/it/resources'
        }
    }
}
